/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <../src/behaviors/behavior_murtum_macro.h>

#define L_LETTERS 0
#define L_GAMING 1
#define L_NUMBERS 2
#define L_NAV 3
#define L_F_ROW 4

/ {

  macros {
        ZMK_MACRO(qs_up,
            wait-ms = <0>;
            bindings = <&kp UP &kp UP &kp UP &kp UP &kp UP>;
        )

        ZMK_MACRO(qs_down,
            wait-ms = <0>;
            bindings = <&kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp DOWN>;
        )

        ZMK_MACRO(roof_no_shit,
            wait-ms = <0>;
            bindings = <&kp RS(RBKT) &kp SPACE>;
        )

        ZMK_MACRO(tilde_no_shit,
            wait-ms = <0>;
            bindings = <&kp RA(RBKT) &kp SPACE>;
        )
    };

    keymap {
        compatible = "zmk,keymap";
        
            layer_letters {
                bindings = <
                    &kp TAB   &kp Q &kp W &kp E     &kp R         &kp T        &kp Y    &kp U     &kp I     &kp O   &kp P    &kp LBKT
                    &mo L_NAV &kp A &kp S &kp D     &kp F         &kp G        &kp H    &kp J     &kp K     &kp L   &kp SEMI &kp SQT
                    &kp LSHFT &kp Z &kp X &kp C     &kp V         &kp B        &kp N    &kp M     &kp COMMA &kp DOT &kp FSLH &kp LALT
                                          &kp LCTRL &mo L_NUMBERS &kp LSHFT    &kp BSPC &kp SPACE &mo L_F_ROW
                >;
            };
        
            layer_gaming {
                bindings = <
                    &kp TAB   &kp Q &kp W &kp E    &kp R         &kp T                &kp Y    &kp U     &kp I     &kp O   &kp P     &kp LBKT
                    &mo L_NAV &kp A &kp S &kp D    &kp F         &kp G                &kp H    &kp J     &kp K     &kp L   &kp SEMI  &kp SQT
                    &kp LSHFT &kp Z &kp X &kp C    &kp V         &kp B                &kp N    &kp M     &kp COMMA &kp DOT &kp FSLH &kp LALT
                                          &kp LCTL &mo L_NUMBERS &kp SPACE            &kp BSPC &kp SPACE &mo L_F_ROW
                >;
            };

            layer_numbers {
                bindings = <
                    &kp GRAVE &kp N1       &kp N2     &kp N3       &kp N4       &kp N5          &kp N6     &kp N7     &kp N8     &kp N9     &kp N0     &kp MINUS
                    &kp ESC   &kp RS(N1)   &kp RS(N2) &kp RS(N3)   &kp LS(NUHS) &kp RS(N5)      &kp LS(N6) &kp LS(N7) &kp LS(N8) &kp LS(N9) &kp LS(N0) &kp LS(MINUS)
                    &trans    &kp RA(NUBS) &kp NUBS   &kp LS(NUBS) &kp RA(N4)   &kp RA(N2)      &kp RS(N4) &kp RA(N7) &kp RA(N8) &kp RA(N9) &kp RA(N0) &kp RA(MINUS)
                                                      &trans       &trans       &trans          &trans     &trans     &trans
                >;
            };

            layer_nav {
                bindings = <
                    &trans &none &none     &none     &murtum_macro MM_RECORD &murtum_macro MM_PLAYBACK        &qs_up   &kp HOME  &kp UP   &kp END   &kp PGUP  &tilde_no_shit
                    &trans &none &kp LCTRL &kp LSHFT &kp LALT                &kp LGUI                         &qs_down &kp LEFT  &kp DOWN &kp RIGHT &kp PGDN  &kp BSLH
                    &trans &none &none     &none     &none                   &none                            &kp F3   &trans    &trans   &trans    &trans    &roof_no_shit
                                           &trans    &trans                  &trans                           &kp DEL  &kp ENTER &none
                >;
            };
        
           layer_f_row {
                bindings = <
                    &kp LA(F4)   &kp F1       &kp F2       &kp F3       &kp F4       &kp F5              &kp F6        &kp F7     &kp F8     &kp F9     &kp F10    &kp F11
                    &kp LGUI     &kp LG(N1)   &kp LG(N2)   &kp LG(N3)   &kp LG(N4)   &kp LG(N5)          &kp LG(N6)    &kp LG(N7) &kp LG(N8) &kp LG(N9) &kp LG(N0) &kp F12
                    &bt BT_CLR   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4        &tog L_GAMING &kp C_PP   &kp C_PREV &kp C_NEXT &kp PSCRN  &kp PAUSE_BREAK
                                                           &trans       &kp CAPS     &trans              &sys_reset    &trans     &trans
                >;
            };
            
    };
};